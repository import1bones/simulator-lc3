name: Cross-Platform Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    # Optimized matrix to reduce CI resource usage while maintaining cross-platform coverage
    # Primary testing on Python 3.9 across all platforms, plus Python 3.11 on Ubuntu only
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9']  # Reduced to single stable version for cross-platform testing
        include:
          # Test latest Python only on Ubuntu for efficiency
          - os: ubuntu-latest
            python-version: '3.11'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ~/AppData/Local/pip/Cache
          ~/Library/Caches/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install cmake

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        refreshenv

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-html pytest-xdist pytest-benchmark pybind11 numpy

    - name: Cache CMake build
      uses: actions/cache@v3
      with:
        path: build
        key: ${{ runner.os }}-cmake-${{ matrix.python-version }}-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-cmake-${{ matrix.python-version }}-
          ${{ runner.os }}-cmake-

    - name: Build and test (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x build_and_test.sh
        ./build_and_test.sh --verbose --coverage --html-report

    - name: Build and test (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        .\build_and_test.bat --verbose --coverage --html-report

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-python${{ matrix.python-version }}
        path: |
          reports/
          build_info.json
        retention-days: 30

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./reports/coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-html pytest-xdist pytest-benchmark pybind11 numpy

    - name: Run integration tests
      run: |
        chmod +x build_and_test.sh
        ./build_and_test.sh --categories integration --parallel --verbose

    - name: Run pipeline tests
      run: |
        ./build_and_test.sh --test-only --categories pipeline --verbose

    - name: Run performance benchmarks
      run: |
        python -m pytest tests/ -m benchmark --benchmark-only --benchmark-json=benchmark.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: benchmark.json
